"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[351],{9418:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var i=t(4848),s=t(8453);const a={title:"Accept specific tenants only",sidebar_position:3},o=void 0,r={id:"multi-tenant/accept_specific_tenants_only",title:"Accept specific tenants only",description:"If your multi-tenant application only should accept a few tenants, you'll have to verify issuers, or the iss field in the JWT.",source:"@site/docs/multi-tenant/accept_specific_tenants_only.mdx",sourceDirName:"multi-tenant",slug:"/multi-tenant/accept_specific_tenants_only",permalink:"/fastapi-azure-auth/multi-tenant/accept_specific_tenants_only",draft:!1,unlisted:!1,editUrl:"https://github.com/Intility/FastAPI-Azure-Auth/edit/main/docs/docs/multi-tenant/accept_specific_tenants_only.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Accept specific tenants only",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"FastAPI configuration",permalink:"/fastapi-azure-auth/multi-tenant/fastapi_configuration"},next:{title:"Azure configuration",permalink:"/fastapi-azure-auth/b2c/azure_setup"}},c={},l=[{value:"More sophisticated callable",id:"more-sophisticated-callable",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["If your multi-tenant application only should accept a few tenants, you'll have to verify ",(0,i.jsx)(n.code,{children:"issuers"}),", or the ",(0,i.jsx)(n.code,{children:"iss"})," field in the JWT."]}),"\n",(0,i.jsxs)(n.p,{children:["We'll take the last code snippet from ",(0,i.jsx)(n.a,{href:"fastapi_configuration",children:"FastAPI configuration"})," and change a few lines of code to make\nthis happen:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",metastring:"{7,42-49,56-57}",children:"import uvicorn\nfrom fastapi import FastAPI, Security\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom pydantic import AnyHttpUrl\nfrom pydantic_settings import BaseSettings, SettingsConfigDict\nfrom fastapi_azure_auth import MultiTenantAzureAuthorizationCodeBearer\nfrom fastapi_azure_auth.exceptions import InvalidAuth\n\n\nclass Settings(BaseSettings):\n    BACKEND_CORS_ORIGINS: list[str | AnyHttpUrl] = ['http://localhost:8000']\n    OPENAPI_CLIENT_ID: str = \"\"\n    APP_CLIENT_ID: str = \"\"\n\n    model_config = SettingsConfigDict(\n        env_file='.env',\n        env_file_encoding='utf-8',\n        case_sensitive=True\n    )\n\nsettings = Settings()\n\napp = FastAPI(\n    swagger_ui_oauth2_redirect_url='/oauth2-redirect',\n    swagger_ui_init_oauth={\n        'usePkceWithAuthorizationCodeGrant': True,\n        'clientId': settings.OPENAPI_CLIENT_ID,\n    },\n)\n\nif settings.BACKEND_CORS_ORIGINS:\n    app.add_middleware(\n        CORSMiddleware,\n        allow_origins=[str(origin) for origin in settings.BACKEND_CORS_ORIGINS],\n        allow_credentials=True,\n        allow_methods=['*'],\n        allow_headers=['*'],\n    )\n\n\nasync def check_if_valid_tenant(tid: str) -> str:\n    tid_to_iss_mapping = {\n        '9b5ff18e-53c0-45a2-8bc2-9c0c8f60b2c6': 'https://login.microsoftonline.com/9b5ff18e-53c0-45a2-8bc2-9c0c8f60b2c6/v2.0'\n    }\n    try:\n        return tid_to_iss_mapping[tid]\n    except KeyError:\n        raise InvalidAuth('Tenant not allowed')\n\nazure_scheme = MultiTenantAzureAuthorizationCodeBearer(\n    app_client_id=settings.APP_CLIENT_ID,\n    scopes={\n        f'api://{settings.APP_CLIENT_ID}/user_impersonation': 'user_impersonation',\n    },\n    validate_iss=True,\n    iss_callable=check_if_valid_tenant\n)\n\n\n@app.on_event('startup')\nasync def load_config() -> None:\n    \"\"\"\n    Load OpenID config on startup.\n    \"\"\"\n    await azure_scheme.openid_config.load_config()\n\n\n@app.get(\"/\", dependencies=[Security(azure_scheme)])\nasync def root():\n    return {\"message\": \"Hello World\"}\n\n\nif __name__ == '__main__':\n    uvicorn.run('main:app', host='localhost', port=8000, reload=True)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We're first creating an ",(0,i.jsx)(n.code,{children:"async function"}),", which takes a ",(0,i.jsx)(n.code,{children:"tid"})," as an argument, and returns the tenant ID's ",(0,i.jsx)(n.code,{children:"iss"})," if it's a valid tenant.\nIf it's not a valid tenant, it has to raise an ",(0,i.jsx)(n.code,{children:"InvalidAuth()"})," exception."]}),"\n",(0,i.jsx)(n.h2,{id:"more-sophisticated-callable",children:"More sophisticated callable"}),"\n",(0,i.jsx)(n.p,{children:"If you want to cache these results in memory, you can do so by creating a more sophisticated callable:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class IssuerFetcher:\n    def __init__(self) -> None:\n        """\n        Example class for multi tenant apps, that caches issuers for an hour\n        """\n        self.tid_to_iss: dict[str, str] = {}\n        self._config_timestamp: Optional[datetime] = None\n\n    async def __call__(self, tid: str) -> str:\n        """\n        Check if memory cache needs to be updated or not, and then returns an issuer for a given tenant\n        :raises InvalidAuth when it\'s not a valid tenant\n        """\n        refresh_time = datetime.now() - timedelta(hours=1)\n        if not self._config_timestamp or self._config_timestamp < refresh_time:\n            self._config_timestamp = datetime.now()\n            # logic to find your allowed tenants and it\'s issuers here\n            # (This example cache in memory for 1 hour)\n            self.tid_to_iss = {\n                \'intility_tenant\': \'intility_tenant\',\n            }\n        try:\n            return self.tid_to_iss[tid]\n        except Exception as error:\n            log.exception(\'`iss` not found for `tid` %s. Error %s\', tid, error)\n            raise InvalidAuth(\'You must be an Intility customer to access this resource\')\n\n\nissuer_fetcher = IssuerFetcher()\n\nazure_scheme = MultiTenantAzureAuthorizationCodeBearer(\n    ...\n    validate_iss=True,\n    iss_callable=issuer_fetcher\n)\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var i=t(6540);const s={},a=i.createContext(s);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);